============================================================
Who Passed the Exam ‚Äì Python Grade Analyzer
============================================================

This project marks one of my first experiences with Python programming, developed during my second year of university. 
It showcases how Python can be used for **data analysis**, **visualization**, and **interactive querying** ‚Äî all within a small, focused educational context.
Built and tested using: **Python 3.x + PyCharm IDE**

------------------------------------------------------------
üîç Project Overview
------------------------------------------------------------

The system consists of two scripts working together:

1. **pass_AEM.py**  
   A comprehensive grade analysis tool that:
   - Loads real student grade data from a `.txt` file
   - Computes key statistics: average, minimum, and maximum grades
   - Counts how many students passed the exam
   - Allows students to look up their personal grade via AEM (student ID)
   - Generates visual insights (grade distribution histogram & pass/fail pie chart)
   - Exports a list of passing students to a separate file

2. **generate_random_grades.py** *(formerly pass_random.py)*  
   A helper script that simulates a dataset by:
   - Generating random student IDs (format: 5XXXX)
   - Assigning random grades from 0.0 to 10.0 (in 0.5 increments)
   - Saving the output to `FAKE_GRADES.TXT` for analysis or testing

------------------------------------------------------------
üìà Features & Skills Demonstrated
------------------------------------------------------------

 -File handling and data parsing  
 -Custom data generation using Python's `random` module  
 -Statistical analysis (average, count, min/max)  
 -Data visualization with `matplotlib`  
 -Interactive console input and output  
 -Modular and beginner-friendly code organization
------------------------------------------------------------

Though simple in scope, this project taught me how to combine **real-world data**, **basic analysis**, 
and **user interaction** in Python. It served as a gateway into more complex programming and data-driven applications ‚Äî laying the foundation
for future work in analytics, automation, and machine learning.

